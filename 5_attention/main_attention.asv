%%%%%%%%%% description %%%%%%%%%%%%%%
 % C reated on Mon Aug 30 2022
%    Place  : NTT
% Author : Yuta Suzuki
  
%  Place           :
% Eye-tracker     : Eyelink
% Display         :
% Visual distance :  cm
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clear all;
close all;

addpath(genpath('../toolBox'));

cfg = [];
cfg.LUMINANCE_BACKGROUND = 0;
cfg.LUMINANCE_TEXT = ones(1,3)*50 / 255;

init_main();

cfg.TIME_PRESENTATION = 2;
cfg.TIME_PRESENTATION_DARK = 0.5;

cfg.NUM_SESSION = 3;
cfg.TIME_FIXATION = 0.5;     % fixation time

cfg.NUM_TRIAL = 10;
cfg.TASK_JITTER = [7 9];

% lineWidth = round(pixel_size(cfg.DOT_PITCH, 1, cfg.VISUAL_DISTANCE));
% arrowLen = round(pixel_size(cfg.DOT_PITCH, 0.5, cfg.VISUAL_DISTANCE));
% 
% pixel_size(0.219,0.5,100)
% atan((39.8487/10 * 0.2658)/50)*(180/pi)

round(pixel_size(cfg.DOT_PITCH, 0.5, cfg.VISUAL_DISTANCE))

lineWidth = pixel_size(cfg.DOT_PITCH, 2.428, cfg.VISUAL_DISTANCE);
arrowLen = round(pixel_size(cfg.DOT_PITCH, 1.2135, cfg.VISUAL_DISTANCE));


directName = {'Left','','Right'};

%% make frame

cfg.GABOL_SIZE = round(pixel_size(cfg.DOT_PITCH, 11.9898, cfg.VISUAL_DISTANCE));
locs_gabor = round(pixel_size(cfg.DOT_PITCH, 11.9898, cfg.VISUAL_DISTANCE));

% res = [cfg.GABOL_SIZE cfg.GABOL_SIZE];

% Define stimulus parameters
lambda = 40;        % wavelength
sigma = cfg.GABOL_SIZE / 8;          % standard deviation of Gaussian envelope
contrast = 0.2;
% contrast = 1;

% Create x and y coordinates
x = -cfg.GABOL_SIZE/2+1:cfg.GABOL_SIZE/2;
y = -cfg.GABOL_SIZE/2+1:cfg.GABOL_SIZE/2;

[X,Y] = meshgrid(x,y);

% Compute Gabor function
cosine = (cos(2*pi*X/lambda) + 1) /2;

gaussian = exp(-(X.^2 + Y.^2)/(2*sigma^2));

gabor = contrast * cosine .* gaussian;
% figure;imshow(gabor);

gabor_dat = zeros(cfg.GABOL_SIZE,cfg.GABOL_SIZE,4);
gabor_dat(:,:,4) = gabor;
% imshow(gabor_dat(:,:,4))

gaborTexture = Screen('MakeTexture',windowPtr,gabor_dat);

%% condition frame ----------------------------------------------------

tmp1 = allcomb(1:2,1);
tmp1 = repmat(tmp1',1,cfg.NUM_TRIAL)';

tmp2 = allcomb(1:2,2);
tmp2 = repmat(tmp2',1,cfg.NUM_TRIAL)';

cfg.condition_frame = [tmp1;tmp2];
cfg.condition_frame = cfg.condition_frame(randperm(size(cfg.condition_frame,1)),:);
cfg.condition_frame = array2table(cfg.condition_frame,'VariableNames',{'Cue','Angle'});

while 1
    tmp = (cfg.TASK_JITTER(2)-cfg.TASK_JITTER(1)).*rand(length(cfg.condition_frame.Cue),1) + cfg.TASK_JITTER(1);
    if abs(mean(cfg.TASK_JITTER) - mean(tmp)) < 0.001
        break;
    end
end

cfg.condition_frame.time = tmp;

%%

angleName = {'mask','CW_CCW','CCW_CW'};
angle = [[0 0];[45 -45];[-45 45]];

% for angle = [[0 0];[-45 45];[45 -45]]'
for iAngle = 1:length(angleName)
    for iPattern = 1:2
        for iProj = [SCREEN_YELLOW SCREEN_BLUE]
            tmp_image = ones(windowRect(3),windowRect(4),3);

            if iPattern == 1 %## draw ipRGC in the left

                for irgb=1:3
                    tmp_image(:,:,irgb) = lightData.ipRGC(iProj*3+irgb);
                end
                %                 tmp_image =  lightData.ipRGC.(['proj' num2str(iProj)])./255;

                width = size(tmp_image,1);
                %                 tmp_image(width/2:end,:,:) = lightData.control.(['proj' num2str(iProj)])(width/2:end,:,:,round(param.coeff_adjusted)) ./255;
                %                 tmp_image(width/2:end,:,:) = lightData.control.(['proj' num2str(iProj)])(width/2:end,:,:,10) ./255;
                for irgb=1:3
%                     tmp_image(width/2:end,:,irgb) = lightData.control(iProj*3+irgb);
                    tmp_image(width/2:end,:,irgb) = lightData.ipRGC(iProj*3+irgb);
                
                end

                %                 tmp_image =  li

            else

                for irgb=1:3
                    tmp_image(:,:,irgb) = lightData.control(iProj*3+irgb);
%                     tmp_image(:,:,irgb) = lightData.ipRGC(iProj*3+irgb);
                
                end
                %                 tmp_image =  lightData.ipRGC.(['proj' num2str(iProj)])./255;

                width = size(tmp_image,1);
                %                 tmp_image(width/2:end,:,:) = lightData.control.(['proj' num2str(iProj)])(width/2:end,:,:,round(param.coeff_adjusted)) ./255;
                %                 tmp_image(width/2:end,:,:) = lightData.control.(['proj' num2str(iProj)])(width/2:end,:,:,10) ./255;

                for irgb=1:3
                    tmp_image(width/2:end,:,irgb) = lightData.ipRGC(iProj*3+irgb);
                end

                %                 tmp_image = lightData.control.(['proj' num2str(iProj)])(:,:,:,round(param.coeff_adjusted)) ./255;
                %                 tmp_image = lightData.control.(['proj' num2str(iProj)])(:,:,:,10) ./255;
                %
                %                 tmp_image(width/2:end,:,:) =  lightData.ipRGC.(['proj' num2str(iProj)])(width/2:end,:,:)./255;
            end

            tmp_image(width/2-round(lineWidth):width/2+round(lineWidth),:) = 0;
            tmp_image = permute(tmp_image,[2 1 3]);
            tmp_image = tmp_image./255;
            % imshow(tmp_image)

            gradtexture = Screen('MakeTexture',windowPtr,tmp_image);
            Screen('DrawTexture', windowPtr, gradtexture, [], windowRect);

            %## save the screen
            [window_light0.(['Pattern' num2str(iPattern)]).(['proj' num2str(iProj)]), screenRect] = ...
                Screen('OpenOffscreenWindow', scrnNum, cfg.LUMINANCE_BACKGROUND,[],[],32);

            Screen('CopyWindow',windowPtr, window_light0.(['Pattern' num2str(iPattern)]).(['proj' num2str(iProj)]));

            %## draw gabor in the left
            Screen('DrawTexture', windowPtr, gaborTexture,[], ...
                [centerX-(cfg.GABOL_SIZE/2)-locs_gabor, centerY-(cfg.GABOL_SIZE/2), ...
                centerX+(cfg.GABOL_SIZE/2)-locs_gabor, centerY+(cfg.GABOL_SIZE/2)], angle(iAngle,1));

            %## draw gabor in the right
            Screen('DrawTexture', windowPtr, gaborTexture,[], ...
                [centerX-(cfg.GABOL_SIZE/2)+locs_gabor, centerY-(cfg.GABOL_SIZE/2), ...
                centerX+(cfg.GABOL_SIZE/2)+locs_gabor, centerY+(cfg.GABOL_SIZE/2)], angle(iAngle,2));


            [window_light.(['Pattern' num2str(iPattern)]).(angleName{iAngle}).(['proj' num2str(iProj)]), screenRect] = ...
                Screen('OpenOffscreenWindow', scrnNum, cfg.LUMINANCE_BACKGROUND,[],[],32);

            Screen('CopyWindow',windowPtr, window_light.(['Pattern' num2str(iPattern)]).(angleName{iAngle}).(['proj' num2str(iProj)]));

        end
    end
end

%% dark adaptation

cfg.res_summary = [];

ShowMessage();

if cfg.sessionNum == 1
    patternNum = [1];
else
    patternNum = [2];
end

count.run = 1;
for iPattern = patternNum
    for iTrial = 1:length(cfg.condition_frame.Cue)

        disp(['Trial:' num2str(iTrial)])
        fixation();
        presentation();
    end

    count.run = count.run+1;

end

pause(5)
if useEyelink
    Eyelink('Message', 'End_Experiment');
end

fprintf('********* Finish **********\n')

sca;
ListenChar(0);

save_name = ['/stealthPupilAttention_',cfg.participantsInfo.name,'_',today_date,'_',num2str(iPattern)];
saveFiles();